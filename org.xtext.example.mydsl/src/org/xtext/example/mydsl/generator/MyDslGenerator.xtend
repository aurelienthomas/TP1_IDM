/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import tP1_IDM.StateMachine
import tP1_IDM.State

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("State.java",'''
			package org.xtext.example.mydsl.generator;
			
			public abstract class State {
				
				private String name;
				private Transition to;
				private Transition from;
				
				public void State();
				public void State(String name, Transtion to, Transtion from);
				public void setName(String name);
				public String getName();
			}
		''')
		var myfsm = resource.contents.get(0) as StateMachine
		myfsm.state.forEach[s | fsa.generateFile(s.name+'.java', s.print)]
	}
	
	def print(State s) {
		'''
			package org.xtext.example.mydsl.generator;
			
			public class « s.name » extends State {
			}
		'''
	}
}
