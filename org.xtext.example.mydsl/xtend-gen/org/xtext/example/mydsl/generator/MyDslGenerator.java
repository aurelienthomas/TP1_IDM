/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator;

import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import tP1_IDM.State;
import tP1_IDM.StateMachine;
import tP1_IDM.Transition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public abstract class State {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Transition incomming;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Transition outgoing;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile("State.java", _builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("public abstract class Transition {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private String name;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private State to;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private State from;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    fsa.generateFile("Transition.java", _builder_1);
    EObject _get = resource.getContents().get(0);
    StateMachine myfsm = ((StateMachine) _get);
    final Consumer<State> _function = (State s) -> {
      String _name = s.getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, this.printState(s));
    };
    myfsm.getState().forEach(_function);
    final Consumer<Transition> _function_1 = (Transition t) -> {
      String _name = t.getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, this.printTransition(t));
    };
    myfsm.getTransition().forEach(_function_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("import java.util.ArrayList;");
    _builder_2.newLine();
    _builder_2.append("import java.util.Scanner;");
    _builder_2.newLine();
    _builder_2.append("public class StateMachine {");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("private State stateStart;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public static void main(String[] args){");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    final Consumer<State> _function_2 = (State s) -> {
      this.generateState(s);
    };
    myfsm.getState().forEach(_function_2);
    _builder_2.newLineIfNotEmpty();
    _builder_2.append("\t\t");
    final Consumer<Transition> _function_3 = (Transition t) -> {
      this.generateTransition(t);
    };
    myfsm.getTransition().forEach(_function_3);
    _builder_2.newLineIfNotEmpty();
    _builder_2.append("\t\t");
    final Consumer<State> _function_4 = (State s) -> {
      this.generateLinkTransition(s);
    };
    myfsm.getState().forEach(_function_4);
    _builder_2.newLineIfNotEmpty();
    _builder_2.append("\t\t");
    _builder_2.append("this.stateStart = ");
    String _lowerCase = myfsm.getStateStart().getName().toLowerCase();
    _builder_2.append(_lowerCase, "\t\t");
    _builder_2.append(";");
    _builder_2.newLineIfNotEmpty();
    _builder_2.append("\t\t");
    _builder_2.append("System.out.println(\"Vous êtes actuellement sur l\'état \"+this.stateStart.getName());");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("Scanner keyboard = new Scanner(System.in);");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("System.out.println(\"Veuillez saisir un état ou Q pour quitter : \");");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("String str = clavier.nextLine();");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("while(str.equals(\"Q\")){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("System.out.println(\"Veuillez saisir un état ou Q pour quitter :\");");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("str = clavier.nextLine();");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("if(str.equals(this.stateStart.getOutgoing().getTo().getName())){");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t");
    _builder_2.append("this.stateStart = this.stateStart.getOutgoing().getTo();");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t");
    _builder_2.append("System.out.println(\"Vous êtes actuellement sur l\'état \"+this.stateStart.getName());");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("}else{");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t");
    _builder_2.append("System.out.println(\"Vous n\'avez pas mentionné un nom d\'état correct.\");");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    fsa.generateFile("StateMachine.java", _builder_2);
  }
  
  public String generateState(final State s) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = s.getName();
    _builder.append(_name);
    _builder.append(" ");
    String _lowerCase = s.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" = new ");
    String _name_1 = s.getName();
    _builder.append(_name_1);
    _builder.append("(\"");
    String _name_2 = s.getName();
    _builder.append(_name_2);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateTransition(final Transition t) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = t.getName();
    _builder.append(_name);
    _builder.append(" ");
    String _lowerCase = t.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(" = new ");
    String _name_1 = t.getName();
    _builder.append(_name_1);
    _builder.append("(\"");
    String _name_2 = t.getName();
    _builder.append(_name_2);
    _builder.append("\",");
    State _to = t.getTo();
    _builder.append(_to);
    _builder.append(",");
    State _from = t.getFrom();
    _builder.append(_from);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateLinkTransition(final State s) {
    StringConcatenation _builder = new StringConcatenation();
    String _lowerCase = s.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(".setIncomming(");
    Transition _incomming = s.getIncomming();
    _builder.append(_incomming);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    String _lowerCase_1 = s.getName().toLowerCase();
    _builder.append(_lowerCase_1);
    _builder.append(".setOutgoing(");
    Transition _outgoing = s.getOutgoing();
    _builder.append(_outgoing);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public CharSequence printState(final State s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _name = s.getName();
    _builder.append(_name);
    _builder.append(" extends State {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State(String name){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return super.name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setIncomming(Transition t){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.incomming = t;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Transition getIncomming(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return super.incomming;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setOutgoing(Transition t){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.outgoing = t;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Transition getOutgoing(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return super.outgoing;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence printTransition(final Transition t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _name = t.getName();
    _builder.append(_name);
    _builder.append(" extends Transition {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public Transition(String name, State to, State from){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("super.name = name;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("super.to = to;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("super.from = from;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return super.name;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public Transition getTo(){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return super.to;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public Transition getFrom(){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return super.from;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
